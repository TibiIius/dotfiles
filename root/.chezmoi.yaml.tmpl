
{{/*
  This represents the chezmoi config used for the initializing machine.
  If possible, prompts for a choice of different machines. 
*/}}

{{/*
  Machines:
    - server: Represents a server machine, i.e. no sophisticated dev env or GUI is needed.
    - work: Represents my work machine.
    - home: Represents private machines.
 */}}
{{- $machineTypes := list "server" "work" "home" -}}
{{- $machineType := "" -}}

{{- $devcontainer:= (or (env "CODESPACES" | not | not) (env "REMOTE_CONTAINERS" | not | not)) -}}

{{- if stdinIsATTY -}}
  {{- $machineType = promptChoiceOnce . "machineType" "Choose a machine type" $machineTypes -}}
{{- else -}}
  {{- $machineType = "home" -}}
{{- end -}}

{{- $ephemeral := false -}}

{{- if $devcontainer -}}
  {{- $ephemeral = true -}}
{{- else if stdinIsATTY -}}
  {{- $ephemeral = promptBoolOnce . "ephemeral" "Is this an ephemeral setup" false -}}
{{- end -}}

{{- $headless:= false -}}
{{- if or $devcontainer (not stdinIsATTY) -}}
  {{- $headless = true -}}
{{- else -}}
  {{- $headless = promptBoolOnce . "headless" "Is this a headless setup" false -}}
{{- end -}}

{{/* Figure out if we have Homebrew support (currently no support under Linux/arm) */}}
{{- $homebrewSupported := true -}}
{{- if (and (eq .chezmoi.arch "arm64") (eq .chezmoi.os "linux")) -}}
  {{- $homebrewSupported = false -}}
{{- else if stdinIsATTY -}}
  {{ $homebrewSupported = promptBoolOnce . "homebrewSupported" "Do you want to install Homebrew" true }}
{{/* No real reason to install Homebrew in something small like a dev container */}}
{{- else if $ephemeral -}}
  {{ $homebrewSupported = false }}
{{- end -}}

{{/* Figure out if we have Rustup support */}}
{{- $rustupSupported := true -}}
{{- if stdinIsATTY -}}
  {{ $rustupSupported = promptBoolOnce . "rustupSupported" "Do you want to install Rustup" true }}
{{- else if $ephemeral -}}
  {{ $rustupSupported = false }}
{{- end -}}

{{/* Ask which C stdlib is used */}}
{{- $cStdLibs := list "gnu" "musl" -}}
{{- $cStdLib := "gnu" -}}
{{- if stdinIsATTY -}}
  {{- $cStdLib = promptChoiceOnce . "cStdLib" "Choose a C stdlib" $cStdLibs -}}
{{- else -}}
  {{- $cStdLib = "gnu" -}}
{{- end -}}


{{/* Sometimes the CPU arch uses synonyms different from Chezmoi */}}
{{ $alterArch := "" }}
{{ if eq .chezmoi.arch "amd64" }}
  {{ $alterArch = "x86_64" }}
{{ else if eq .chezmoi.arch "arm64" }}
  {{ $alterArch = "aarch64" }}
{{ else }}
  {{ $alterArch = .chezmoi.arch }}
{{ end }}

{{/* Personal info */}}
{{- $email:= "oss@timfb.dev" -}}
{{- $name:= "Tim Friedrich Br√ºggemann" -}}

{{- if eq $machineType "work" -}}
  {{- $email = promptStringOnce . "email" "Enter your work email" -}}
  {{- $name = promptStringOnce . "name" "Enter your work name" -}}
{{- end -}}


{{/* Actual config */}}

encryption: "age"
age:
  identity: "~/.config/chezmoi/key.txt"
  recipient: "age1z0t73f090ns5q7cn38yl8m5m05jsycxl253wd4u3q6try0za6qfq684r0s"

sourceDir: "{{ .chezmoi.sourceDir }}"

data:
  name: {{ $name | quote }}
  email: {{ $email | quote }}
  machineType: {{ $machineType | quote }}
  ephemeral: {{ $ephemeral }}
  headless: {{ $headless }}
  homebrewSupported: {{ $homebrewSupported }}
  rustupSupported: {{ $rustupSupported }}
  cStdLib: {{ $cStdLib | quote }}
  alterArch: {{ $alterArch | quote }}
  packages:
    apt:
      - tmux
    rust:
      - cargo-quickinstall
      - cargo-update
    brew:
  {{- if eq .chezmoi.os "darwin" }}
    {{- if not $headless }}
      - cask: visual-studio-code
      - cask: iterm2
      - cask: spotify
      - cask: google-chrome
      - cask: firefox
      - cask: zen-browser
      - cask: audacity
      - cask: darkmodebuddy
      - cask: figma
    {{- end }}
      - brew: tmux
      - brew: docker
      - brew: docker-compose
      - brew: docker-buildx
      - brew: git
      - brew: git-lfs
      - brew: lima
    {{- if eq .machineType "work" }}
      {{- if not $headless }}
      - cask: slack
      - cask: dbeaver-community
      {{- end }}
    {{- end }}
  {{- end }}

merge:
  command: "nvim"
  args: ["-d", "{{ "{{" }} .Destination {{ "}}" }}", "{{ "{{" }} .Source {{ "}}" }}", "{{ "{{" }} .Target {{ "}}" }}"]

update:
  recurseSubmodules: true
