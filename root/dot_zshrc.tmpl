# Antidote clone location
export ANTIDOTE_CLONE_LOCATION=${HOME}/.antidote

# Source antidote.
source ${ANTIDOTE_CLONE_LOCATION}/antidote.zsh

autoload -Uz compinit && compinit

# Load from ~/.zsh_plugins.txt
antidote load

{{- if eq .chezmoi.os "darwin" }}

# MacOS convenience functions
alias sha1sum="shasum -a 1"
alias sha256sum="shasum -a 256"
alias sha512sum="shasum -a 512"

{{- end }}

# Prompt
eval "$(starship init zsh)"

# Zoxide init
[[ $(command -v zoxide) ]] && eval "$(zoxide init zsh)"

# Aliases
## Replacements
[[ $(command -v bat) ]] && alias cat='bat -p'
[[ $(command -v rg) ]] && alias grep='rg'
[[ $(command -v fd) ]] && alias find='fd'
[[ $(command -v dust) ]] && alias du='dust'
## Git aliases
alias gits='git status'
alias gitst='git stash'
alias gitstp='git stash pop'
alias gitsta='git stash apply'
alias gitstd='git stash apply'
alias gitd='git diff'
alias gitds='git diff --staged'
alias gitl='git log'
alias gitlp='git log -p'
alias gita='git add'
alias gitc='git commit'
alias gitj='jira commit'
alias gitca='git commit --amend'
alias gitcan='git commit --amend --no-edit'
alias gitcf='git commit --fixup'
alias gitcfh='git commit --fixup HEAD'
alias gitf='git fetch --all'
alias gitfp='git fetch --all --prune'
alias gitfr='git fetch --all && git rebase'
alias gitfpr='git fetch --all --prune && git rebase'
alias gitr='git rebase'
alias gitp='git push'
## Misc
alias temppls='cd $(mktemp -d)'
alias passpls='cat /dev/urandom | tr -dc "0-9a-zA-Z" | head -c32'
alias hostpls='distrobox-host-exec $SHELL'
alias dhe='distrobox-host-exec'
alias rm='rm -I'
alias bandwhich="sudo $(command -v bandwhich)"
alias vim='nvim'
alias vi='nvim'
alias cutlb='perl -pi -e "chomp if eof"'
[[ ! $(command -v code) ]] && alias code='flatpak run com.visualstudio.code'
alias coder='code --reuse-window'
## Chezmoi
alias ce='chezmoi edit --apply'
## Marp with Docker
alias marp-convert="docker run --rm -v \"./:/home/marp/app/:Z\" -e LANG=$LANG -e MARP_USER=\"${UID}:${GID}\" marpteam/marp-cli"
alias marp-serve="docker run --rm --init -v \"./:/home/marp/app:Z\" -e LANG=$LANG -e MARP_USER=\"${UID}:${GID}\" -p 8080:8080 -p 37717:37717 marpteam/marp-cli -s"

# Updating stuff
update_tools() {
    antidote update
    [[ $(command -v chezmoi) ]] && chezmoi upgrade && chezmoi update
    [[ $(command -v brew) ]] && brew upgrade
    [[ $(command -v mise) ]] && mise self-update --yes && mise upgrade
    [[ $(command -v rustup) ]] && rustup upgrade
}

# Tmux
if [[ $(command -v tmux) ]]; then
  # We check if ${TMUX_EXEC} exists, otherwise we encounter recoursion when sourcing again
  if [[ -z "${TMUX_EXEC}" ]]; then
    TMUX_EXEC=$(command -v tmux)

    ## Function for convenience
    tmux() {
      if [ -z "$1" ]; then
        $TMUX_EXEC
      else
        if [ "$1" = "a" ] && ! $TMUX_EXEC has-session 2>/dev/null; then
          $TMUX_EXEC
        else
          $TMUX_EXEC $@
        fi
      fi
    }
  fi

{{ if eq .machineType "server" }}
  ## SSH connection
  if [[ "${SSH_CONNECTION}" ]]; then
    # Create a new SSH Tmux session if there is none
    if ! $(${TMUX_EXEC} has-session -t ssh); then
      ${TMUX_EXEC} new-session -s ssh -d
    fi
    if [[ -z "${TMUX}" ]]; then
      ${TMUX_EXEC} a -t ssh
    fi
  fi
{{ end }}
fi

# Go stuff
export GOPATH=$HOME/.local/share/go
export PATH=$GOPATH/bin:$PATH

# mise
[[ $(command -v mise) ]] && eval "$(mise activate zsh)"
export MISE_NODE_COREPACK=true

{{ if eq .chezmoi.os "darwin" }}
# iTerm2
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
{{ end }}

# atuin shell history
[[ $(command -v atuin) ]] && eval "$(atuin init zsh)"

# broot
[[ $(command -v broot) ]] && source $HOME/.config/broot/launcher/bash/br

# Rasmus 5Head-Git-Stuff
currentBranch() {
    git rev-parse --abbrev-ref HEAD
}

gitrs() {
    git_fml || return 1
    if [[ -z $1 ]]; then
        echo "No remote"
        return 1
    fi

    branch=$(currentBranch)
    git switch -C "${branch}" "${1}/${branch}"
    grunt
}

gitrm() {
    git_fml || return 1
    if [[ -z $1 ]]; then
        echo "No remote"
        return 1
    fi

    branch=$(currentBranch)
    git merge $1/$branch
}

git_fml() {
    if [[ -e $(pwd)/.git/index.lock ]]; then
        echo "Index lock exists, aborting..."
        return 1
    fi
}

export DBX_CONTAINER_MANAGER=docker

# K8s
source <(kubectl completion zsh)

# Load completions
fpath+=~/.zfunc
{{ if eq .chezmoi.os "linux" }}
fpath+=/usr/share/zsh/vendor-completions
fpath+=/usr/share/zsh/site-functions
{{ end }}
